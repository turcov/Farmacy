/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.iucosoft.farmacy.gui;

import com.iucosoft.farmacy.dao.AnalogDaoIntf;
import com.iucosoft.farmacy.dao.impl.AnalogDaoImpl;
import com.iucosoft.farmacy.exceptions.ConnectionInterruptedException;
import com.iucosoft.farmacy.gui.models.AnalogListModel;
import com.iucosoft.farmacy.gui.models.MedicamentListModel;
import com.iucosoft.farmacy.model.Analog;
import com.iucosoft.farmacy.model.Medicament;
import com.iucosoft.farmacy.reports.AnalogReport;
import com.iucosoft.farmacy.reports.Report;
import com.iucosoft.farmacy.utils.ExportReports;
import java.awt.print.PrinterException;
import java.text.MessageFormat;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import static javax.swing.JOptionPane.ERROR_MESSAGE;
import javax.swing.JTable;

/**
 *
 * @author Turkov S
 */
public class JFrameAnalogs extends javax.swing.JFrame {

    private static final Logger LOG = Logger.getLogger(JFrameAnalogs.class.getName());

    /**
     * Creates new form JFrameAnalogs
     */
    public JFrameAnalogs() {
        initComponents();
        setLocationRelativeTo(null);
    }

    public void setGuiComponents(Medicament medicament) throws Exception {
        jTextFieldMedicament.setText(medicament.getNameMedicament());
        analogsListModel = new AnalogListModel();
        analogsListModel.refreshModel(medicament);
        jListAnalogs.setModel(analogsListModel);
        aMedicamentListModel = new MedicamentListModel();
        aMedicamentListModel.refreshAnalogsModel(medicament);
        jListMedicaments.setModel(aMedicamentListModel);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jListMedicaments = new javax.swing.JList();
        jScrollPane2 = new javax.swing.JScrollPane();
        jListAnalogs = new javax.swing.JList();
        jButtonAdd = new javax.swing.JButton();
        jButtonRemove = new javax.swing.JButton();
        jButtonAddAll = new javax.swing.JButton();
        jButtonRemoveAll = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jButtonSaveAndClose = new javax.swing.JButton();
        jTextFieldMedicament = new javax.swing.JTextField();
        jButtonExportExcel = new javax.swing.JButton();
        jButtonExportPdf = new javax.swing.JButton();
        jButtonExportCSV = new javax.swing.JButton();
        jButtonPrint = new javax.swing.JButton();
        jButtonExportJxls = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentShown(evt);
            }
        });

        jListMedicaments.setBorder(javax.swing.BorderFactory.createTitledBorder("Medicaments List"));
        jListMedicaments.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jListMedicamentsMousePressed(evt);
            }
        });
        jScrollPane1.setViewportView(jListMedicaments);

        jListAnalogs.setBorder(javax.swing.BorderFactory.createTitledBorder("Analogs List"));
        jListAnalogs.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jListAnalogsMousePressed(evt);
            }
        });
        jScrollPane2.setViewportView(jListAnalogs);

        jButtonAdd.setText(">");
        jButtonAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAddActionPerformed(evt);
            }
        });

        jButtonRemove.setText("<");
        jButtonRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonRemoveActionPerformed(evt);
            }
        });

        jButtonAddAll.setText(">>>");
        jButtonAddAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAddAllActionPerformed(evt);
            }
        });

        jButtonRemoveAll.setText("<<<");
        jButtonRemoveAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonRemoveAllActionPerformed(evt);
            }
        });

        jLabel1.setText("Please add or remove analogs to medicament");

        jButtonSaveAndClose.setText("Close");
        jButtonSaveAndClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSaveAndCloseActionPerformed(evt);
            }
        });

        jTextFieldMedicament.setEditable(false);
        jTextFieldMedicament.setBackground(new java.awt.Color(204, 204, 255));

        jButtonExportExcel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/iucosoft/farmacy/gui/icons/1423070960_Microsoft Office Excel32.png"))); // NOI18N
        jButtonExportExcel.setToolTipText("Export to Excel");
        jButtonExportExcel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonExportExcelActionPerformed(evt);
            }
        });

        jButtonExportPdf.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/iucosoft/farmacy/gui/icons/1423071193_Adobe Acrobat Professional32.png"))); // NOI18N
        jButtonExportPdf.setToolTipText("Export to Pdf");
        jButtonExportPdf.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonExportPdfActionPerformed(evt);
            }
        });

        jButtonExportCSV.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/iucosoft/farmacy/gui/icons/file_csv32.png"))); // NOI18N
        jButtonExportCSV.setToolTipText("Export to CSV");
        jButtonExportCSV.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonExportCSVActionPerformed(evt);
            }
        });

        jButtonPrint.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/iucosoft/farmacy/gui/icons/printer.png"))); // NOI18N
        jButtonPrint.setToolTipText("Print Table");
        jButtonPrint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonPrintActionPerformed(evt);
            }
        });

        jButtonExportJxls.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/iucosoft/farmacy/gui/icons/1424199566_application-vnd.ms-excel.png"))); // NOI18N
        jButtonExportJxls.setToolTipText("ExportReport");
        jButtonExportJxls.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonExportJxlsActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextFieldMedicament, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(jButtonAddAll, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jButtonRemoveAll, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGroup(layout.createSequentialGroup()
                                            .addGap(8, 8, 8)
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                .addComponent(jButtonAdd)
                                                .addComponent(jButtonRemove))))
                                    .addComponent(jButtonSaveAndClose))
                                .addGap(18, 18, 18)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(81, 81, 81)
                        .addComponent(jButtonExportExcel, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButtonExportPdf, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButtonExportCSV, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10)
                        .addComponent(jButtonExportJxls, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButtonPrint, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(31, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jTextFieldMedicament, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButtonExportPdf, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonExportExcel, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonExportCSV, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonPrint, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonExportJxls, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jScrollPane2)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 242, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(36, 36, 36)
                        .addComponent(jButtonAdd)
                        .addGap(18, 18, 18)
                        .addComponent(jButtonRemove)
                        .addGap(18, 18, 18)
                        .addComponent(jButtonAddAll)
                        .addGap(18, 18, 18)
                        .addComponent(jButtonRemoveAll)
                        .addGap(18, 18, 18)
                        .addComponent(jButtonSaveAndClose)))
                .addContainerGap(28, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void addSelectedAnalogs() {
        if (aMedicamentListModel.getSize() > 0) {
            List<Medicament> medList = jListMedicaments.getSelectedValuesList();
            List<Analog> analogList = new ArrayList<>();
            Analog analog;
            try {
                analogsDao = new AnalogDaoImpl();
                for (Medicament med : medList) {
                    analog = new Analog(medicament.getIdMedicament(), med.getIdMedicament());
                    analogList.add(analog);
                    aMedicamentListModel.removeElement(med);
                }
                analogsDao.createAnalogs(analogList);
                analogsListModel.refreshModel(medicament);
            } catch (ConnectionInterruptedException ex) {
                JOptionPane.showMessageDialog(this, ex.getMessage(), "ERROR", ERROR_MESSAGE);
            }

        } else {
            JOptionPane.showMessageDialog(this, "List is Empty");
        }
    }
    private void jButtonAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAddActionPerformed
        addSelectedAnalogs();
    }//GEN-LAST:event_jButtonAddActionPerformed

    private void removeSelectedAnalogs() {
        if (analogsListModel.getSize() > 0) {
            Medicament selectedMedicament = (Medicament) jListAnalogs.getSelectedValue();
            List<Medicament> medList = jListAnalogs.getSelectedValuesList();
            List<Analog> analogList = new ArrayList<>();
            Analog analog;
            try {
                analogsDao = new AnalogDaoImpl();
                for (Medicament med : medList) {
                    analog = new Analog(medicament.getIdMedicament(), med.getIdMedicament());
                    analogList.add(analog);
                    aMedicamentListModel.addElement(med);
                }
                analogsDao.removeAnalogs(analogList);
                analogsListModel.refreshModel(medicament);
            } catch (ConnectionInterruptedException ex) {
                JOptionPane.showMessageDialog(this, ex.getMessage(), "ERROR", ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(this, "List is Empty");
        }
    }
    private void jButtonRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonRemoveActionPerformed
        removeSelectedAnalogs();
    }//GEN-LAST:event_jButtonRemoveActionPerformed

    private void jButtonSaveAndCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSaveAndCloseActionPerformed
        dispose();
    }//GEN-LAST:event_jButtonSaveAndCloseActionPerformed

    private void jListMedicamentsMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jListMedicamentsMousePressed
        if (evt.getClickCount() == 2) {
            addSelectedAnalogs();
        }
    }//GEN-LAST:event_jListMedicamentsMousePressed

    private void jListAnalogsMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jListAnalogsMousePressed
        if (evt.getClickCount() == 2) {
            removeSelectedAnalogs();
        }

    }//GEN-LAST:event_jListAnalogsMousePressed

    private void formComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentShown
        try {
            setGuiComponents(medicament);
        } catch (Exception ex) {
            Logger.getLogger(JFrameAnalogs.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_formComponentShown

    private Object[] createExportView() {
        String header = "";
        String footer = "";
        String[] columns = {medicament.getNameMedicament() + " analogs"};
        String[][] rows = new String[analogsListModel.size()][1];
        for (int i = 0; i < analogsListModel.size(); i++) {
            rows[i][0] = analogsListModel.getElementAt(i).getNameMedicament();
        }
        JTable jTable = new JTable(rows, columns);
        return new Object[]{jTable, header, footer};
    }


    private void jButtonExportExcelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonExportExcelActionPerformed
        Object views[] = createExportView();
        ExportReports.exportTableModelDialog(
                "xls", (JTable) views[0], (String) views[1], (String) views[2]);
    }//GEN-LAST:event_jButtonExportExcelActionPerformed

    private void jButtonExportPdfActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonExportPdfActionPerformed
        Object views[] = createExportView();
        ExportReports.exportTableModelDialog(
                "pdf", (JTable) views[0], (String) views[1], (String) views[2]);
    }//GEN-LAST:event_jButtonExportPdfActionPerformed

    private void jButtonExportCSVActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonExportCSVActionPerformed
        Object views[] = createExportView();
        ExportReports.exportTableModelDialog(
                "csv", (JTable) views[0], (String) views[1], (String) views[2]);
    }//GEN-LAST:event_jButtonExportCSVActionPerformed

    private void jButtonPrintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonPrintActionPerformed
        try {
            Object views[] = createExportView();
            MessageFormat header = new MessageFormat((String) views[2]);
            MessageFormat footer = new MessageFormat((String) views[1] + ". Page - {0}");
            JTable jTable = (JTable) views[0];
            boolean complete = jTable.print(JTable.PrintMode.FIT_WIDTH, header, footer);
            if (complete) {
                JOptionPane.showMessageDialog(this, "Table was printed succesfuly");
            } else {
                JOptionPane.showMessageDialog(this, "Printing has been cancelled");
            }
        } catch (PrinterException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", ERROR_MESSAGE);
            LOG.log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButtonPrintActionPerformed

    private void jButtonAddAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAddAllActionPerformed
        jListMedicaments.setSelectionInterval(0, jListMedicaments.getModel().getSize() - 1);
        addSelectedAnalogs();
    }//GEN-LAST:event_jButtonAddAllActionPerformed

    private void jButtonRemoveAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonRemoveAllActionPerformed
        jListAnalogs.setSelectionInterval(0, jListAnalogs.getModel().getSize() - 1);
        removeSelectedAnalogs();
    }//GEN-LAST:event_jButtonRemoveAllActionPerformed

    private void jButtonExportJxlsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonExportJxlsActionPerformed
        Report report = new Report();
        report.setHeader("Analogs list for " + medicament.getNameMedicament());
        List reportList = new ArrayList();
        for (int i = 0; i < analogsListModel.getSize(); i++) {
            reportList.add(
                    new AnalogReport(
                            analogsListModel.get(i).getNameMedicament(),i+1));
        }
        report.setData(reportList);
        ExportReports.exportJxlsDialog(report, "AnalogReport", "analogreport.xls");
    }//GEN-LAST:event_jButtonExportJxlsActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(JFrameAnalogs.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(JFrameAnalogs.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(JFrameAnalogs.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(JFrameAnalogs.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new JFrameAnalogs().setVisible(true);
                } catch (Exception ex) {
                    Logger.getLogger(JFrameAnalogs.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonAdd;
    private javax.swing.JButton jButtonAddAll;
    private javax.swing.JButton jButtonExportCSV;
    private javax.swing.JButton jButtonExportExcel;
    private javax.swing.JButton jButtonExportJxls;
    private javax.swing.JButton jButtonExportPdf;
    private javax.swing.JButton jButtonPrint;
    private javax.swing.JButton jButtonRemove;
    private javax.swing.JButton jButtonRemoveAll;
    private javax.swing.JButton jButtonSaveAndClose;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JList jListAnalogs;
    private javax.swing.JList jListMedicaments;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField jTextFieldMedicament;
    // End of variables declaration//GEN-END:variables

    MedicamentListModel aMedicamentListModel;
    AnalogDaoIntf analogsDao;
    AnalogListModel analogsListModel;
    private Medicament medicament;

    public void setMedicament(Medicament medicament) {
        this.medicament = medicament;
    }

}
